# Credit to Maxim Norin https://github.com/mnorin
# for OOP emulation base from https://stackoverflow.com/questions/36771080/creating-classes-and-objects-using-bash-scripting#comment115718570_40981277
# Modified by Aurtzy

# Class named "App" for bash object

# fields
declare -Ag fields

# Handles getting/setting fields.
App.field() {
	if [ "$2" == "=" ]; then
		fields[$1]=$3
	else
		echo ${fields[$1]}
	fi
}

# App class constructor
# Params: $1 = installCommand $2 = sourcePaths
App.constructor() {

	# Command that is used to install App
	if [ ! "$1" ]; then
		App.installCommand = "${DEFAULT_APP_INSTALL_COMMAND//"$app"/App}"
	else
		App.installCommand = "${1//"$app"/App}"
	fi
	
	# Backup type
	if [ ! "$2" ]; then
		App.backupType = $DEFAULT_APP_BACKUP_TYPE
	else
		App.backupType = $2
	fi
	
	# Source paths to be backed up
	App.sourcePathsCount = 0
	App.sourcePathsAdd "${@:3}"
	
	App.installed = 0
	App.backedUp = 0
	App.backupsInstalled = 0
	
	App.failedInstall = 0
	App.failedBackup = 0
	App.absentBackupSourcesCount = 0
}

# Getter/setter methods
App.installCommand() {
	App.field installCommand "$1" "$2"
}
App.backupType() {
	if [[ "$2" != "" && "$2" != 'COPY' && "$2" != 'HARDLINK' ]]; then
		echo "App: Error: Backup type input $2 was not recognized!"
		echo "Script will not continue. Please resolve."
		echo "Exiting..."
		exit 1
	fi
	App.field backupType "$1" "$2"
}
App.sourcePaths() {
	if [ "$2" = '' ]; then
		for (( i=0 ; i < $(App.sourcePathsCount) ; i++ )); do
			App.field sourcePath${i}
		done
	else
		if [ "${3: -1}" = '/' ]; then
			sourcePath=${3::-1}
		fi
		App.field sourcePath${1} "$2" "$sourcePath"
	fi
}
App.sourcePathsCount() {
	declare -i intParam=$2
	App.field sourcePathsCount "$1" "$intParam"
}
App.absentBackupSourcesCount() {
	declare -i intParam=$2
	App.field absentBackupSourcesCount "$1" "$intParam"
}
App.installed() {
	declare -i intParam=$2
	App.field installed "$1" "$intParam"
}
App.backedUp() {
	declare -i intParam=$2
	App.field backedUp "$1" "$intParam"
}
App.backupsInstalled() {
	declare -i intParam=$2
	App.field backupsInstalled "$1" "$intParam"
}
App.failedInstall() {
	declare -i intParam=$2
	App.field failedInstall "$1" "$intParam"
}
App.failedBackup() {
	declare -i intParam=$2
	App.field failedBackup "$1" "$intParam"
}
App.absentBackupSources() {
	if [ "$2" = '' ]; then
		for (( i=0 ; i < $(App.absentBackupSourcesCount) ; i++ )); do
			App.field absentBackupSource${i}
		done
	else
		App.field absentBackupSource${1} "$2" "$3"
	fi
}
App.sourcePathsAdd() {
	declare -i i=$(App.sourcePathsCount)
	for sourcePath in "${@}"; do
		App.sourcePaths "$i" = "$sourcePath"
		i+=1
	done
	App.sourcePathsCount = $i
}
App.absentBackupSourcesAdd() {
	App.failedBackup = 1
	declare -i i=$(App.absentBackupSourcesCount)
	for sourcePath in "${@}"; do
		App.absentBackupSources "$i" = "$sourcePath"
		i+=1
	done
	App.absentBackupSourcesCount = $i
}

# Display app info
App.info() {
	echo "APP NAME:"
	echo "    App"
	echo "BACKUP TYPE:"
	echo "    $(App.backupType)"
	echo "BACKUPS:"
	if [ "$(App.sourcePathsCount)" -eq 0 ]; then
		echo "    none"
	else
		IFS=$'\n'
		for sourcePath in $(App.sourcePaths); do
			echo "    $sourcePath"
		done
		unset IFS
	fi
}

# Install App on call
# Also reset to original dir in case command used cd
App.install() {
	echo
	if [ $(App.installed) -eq 1 ]; then
		echo "App: Already installed during this script."
		return 0
	fi
	echo "App: Installing..."
	eval $(App.installCommand)
	if [ $? -ne 0 ]; then
		echo "App: Error: App failed to install."
		App.failedInstall = 1
		return 1
	fi
	cd "$SCRIPT_WORKING_DIR"
	
	if [ "$(App.sourcePaths)" != '' ]; then
		echo
		echo "App: One or more backups were detected."
		if [ "$(App.backupsInstalled)" -eq 1 ]; then
			echo "App: Backups already installed."
			return
		fi
		case "$APP_INSTALL_BACKUPS" in
			1) App.installBackups;;
			"-1") echo "App: Skipping backup install.";;
			*)
				echo "Do you want to install backups for App?"
				while true; do
					read -p "[y/n]: " userIn
					case "$userIn" in
						y) App.installBackups;;
						n) echo "App: Backups will not be installed.";;
					esac
				done;;
		esac
	fi
	
	App.installed = 1
	App.failedInstall = 0
}

App.installBackups() {
	backupDir="$APP_BACKUP_DIR/App"
	IFS=$'\n'
	for sourcePath in $(App.sourcePaths); do
		source="${sourcePath##*"/"}"
		sourceDir="${sourcePath%"/"*}"
		echo
		echo "App: Installing $sourcePath"
		# Discover or create source dir
		[ -d "$sourceDir" ] || mkdir "$sourceDir"
		cp -a "$backupDir/$source" "$sourceDir"
		if [ $? -ne 0 ]; then
			echo "App: Error: $source could not be installed."
		else
			echo "App: $source was successfully installed!"
		fi
	done
	unset IFS
	App.backupsInstalled = 1
}

# Back up sources
App.backup() {
	echo
	if [ "$(App.backedUp)" -eq 1 ]; then
		echo "App: already backed up during this script."
		return 3
	elif [ "$(App.sourcePaths)" = '' ]; then
		echo "App: no sourcePaths specified for App."
		return
	elif [ "$(App.failedBackup)" -eq 1 ]; then
		echo "App: skipping; backup previously failed."
	fi

	# Find sources and keep track of absent sources; if exist, then prompt user to handle
	declare -a sources
	IFS=$'\n'
	for sourcePath in $(App.sourcePaths); do
		if [ -e "$sourcePath" ]; then
			echo "App: found $sourcePath"
			sources+=("$sourcePath")
		else
			echo "App: $sourcePath was not found"
			App.absentBackupSourcesAdd "$sourcePath"
		fi
	done
	unset IFS
	if [ "$(App.absentBackupSourcesCount)" -gt 0 ]; then
		echo "App: Error: the following source(s) was not found:"
		App.absentBackupSources
		[ "$SKIP_ERRORS" = 1 ] && return 1
		echo "Do you want to [a]bort the script, [s]kip this app, [c]ontinue backing up, or attempt to resolve the issue before [t]rying again? The current backup will remain if either of the first two are chosen."
		while true; do
			read -p "[a/s/c/t]: " userIn
			case "$userIn" in
				a*) echo "App: aborting backup"; exit 1;;
				s*) echo "App: skipping" App.failedBackup = 1; return;;
				c*) echo "App: continuing backup"; break;;
				t*) echo "App: trying again" App.backup; return $?;;
			esac
		done
	fi

	# Perform backup depending on backupType and return if failed
	echo "Setting up $TMP_DIR"
	[ -e "$TMP_DIR" ] && rm -r "$TMP_DIR"
	mkdir "$TMP_DIR"
	echo "App: performing backup..."
	declare backupDir="$APP_BACKUP_DIR/App"
	case "$(App.backupType)" in
		COPY) cp -a "${sources[@]}" "$TMP_DIR"; echo "App: copied sources";;
		HARDLINK) cp -al "${sources[@]}" "$TMP_DIR"; echo "App: hard-linked sources";;
		*) echo "App: Error: backup type not recognized, app will not be created"; return 1;;
	esac
	[ "$?" -ne 0 ] && App.failedBackup = 1 && return 1

	# Make backup dir if it doesn't exist
	[ -d "$APP_BACKUP_DIR" ] || mkdir "$APP_BACKUP_DIR"

	# Dump if old backups exist and move new backups to APP_BACKUP_DIR/App
	declare -a backups=("$TMP_DIR/"*)
	declare -a oldBackups=("$backupDir/"*)
	if [ -e "$oldBackups" ]; then
		echo "App: found at least one existing backup. dumping..."
		dumpTo "App" "${oldBackups[@]}"
	fi
	mv "${backups[@]}" "$backupDir"

	echo "App: backup completed."
	App.backedUp = 1
}

