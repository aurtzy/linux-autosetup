# Credit to Maxim Norin https://github.com/mnorin
# for OOP-based code from https://stackoverflow.com/questions/36771080/creating-classes-and-objects-using-bash-scripting#comment115718570_40981277
# Modified by Aurtzy

# Class named "app" for bash object

# fields
declare -Ag fields

# Handles getting/setting fields.
app.field() {
	if [ "$2" == "=" ]; then
		fields[$1]=$3
	else
		echo ${fields[$1]}
	fi
}

# app class constructor
# Params: $1 = installCommand $2 = sourcePaths
app.constructor() {
	app.name = "app"
	
	# Command that is used to install app
	if [ ! "$1" ]; then
		app.installCommand = "${DEFAULT_APP_INSTALL_COMMAND//"$name"/app}"
	else
		app.installCommand = "$1"
	fi
	
	# Backup type
	if [[ "$2" != "" && "$2" != 'ARCHIVE' && "$2" != 'HARDLINK' ]]; then
		echo "app: Encountered an error."
		echo "Error: Backup type input $2 was not recognized!"
		echo "Exiting..."
		exit 1
	fi
	if [ ! "$2" ]; then
		app.backupType = $DEFAULT_APP_BACKUP_TYPE
	else
		app.backupType = $2
	fi
	
	# Source paths to be backed up
	declare -i i=1
	for sourcePath in ${@:3}; do
		echo $i
		app.sourcePaths "$i" = "$sourcePath"
		i+=1
	done
	i=i-1
	app.sourcePathsCount = "$i"
	
	echo "app: Built."
}

# Getter/setter methods
app.name() {
	app.field name "$1" "$2"
}
app.installCommand() {
	app.field installCommand "$1" "$2"
}
app.backupType() {
	app.field backupType "$1" "$2"
}
app.sourcePaths() {
	if [ "$2" = '' ]; then
		for (( i=1 ; i <= $(app.sourcePathsCount) ; i++ )); do
			app.field sourcePath${i}
		done
	else
		if [ ${3: -1} = '/' ]; then
			sourcePath=${3::-1}
		fi
		app.field sourcePath${1} "$2" "$sourcePath"
	fi
}
# Stores number of sourcePaths
app.sourcePathsCount() {
	app.field sourcePathsCount "$1" "$2"
}

# Install app on call
# Also reset to original dir in case command used cd
app.install() {
	echo "app: Installing..."
	eval $(app.installCommand)
	cd "$SCRIPT_WORKING_DIR"
	
	if [ "$(app.sourcePaths)" != '' ]; then
		echo "apps: One or more backups were detected."
		if [ $installAppBackups -eq 1 ]; then
			app.installBackups
		elif [ $installAppBackups -eq 0 ]; then
			echo "Enter -y/-n if you want to autofill."
			declare -i userIn=$(promptYesNo "Would you like to install them?")
			if [ $userIn -eq 1 ]; then
				app.installBackups
			elif [ $userIn -eq 2 ]; then
				installAppBackups=1
				app.installBackups
			elif [ $userIn -eq -1 ]; then
				installAppBackups=-1
			fi
		else
			echo "apps: Backups will not be installed."
		fi
		
	fi
}

app.installBackups() {
	backupDir="$APP_BACKUP_DIR/app"
	for sourcePath in $(app.sourcePaths); do
		source="${sourcePath##*"/"}"
		sourceDir="${sourcePath%"/"*}"
		echo "app: Installing $sourcePath"
		cp -a "$backupDir/$source" "$sourceDir"
		if [ $? -ne 0 ]; then
			echo "app: Error: $source could not be installed."
		else
			echo "app: $source was successfully installed!"
		fi
	done
}

# Back up sources
app.backup() {
	if [ "$(app.sourcePaths)" = '' ]; then
		echo "app: No sourcePaths specified for app."
		return
	else
		backupDir="$APP_BACKUP_DIR/app"
		if [ ! -d "$backupDir" ]; then
			echo
			echo "app: Backup directory not found. Making one for you..."
			mkdir -p "$backupDir"
		else
			dump "INITIALIZE" "app"
		fi
		
		for sourcePath in $(testing.sourcePaths); do
			echo
			source="${sourcePath##*"/"}"
			sourceDir="${sourcePath%"/"*}"
			
			# Check if sourcePath exists
			if [[ -f "$sourcePath" || -d "$sourcePath" ]]; then
				echo "app: Found: $sourcePath"
				
				# Dump any old backup
				echo "$backupDir/$source"
				if [[ -f "$backupDir/$source" || -d "$backupDir/$source" ]]; then
					echo "app: Old backup found. Dumping..."
					dump "$backupDir/$source" "app"
					echo "app: Dumped old $source"
				fi
				
				# PERFORM BACKUP
				echo "app: Performing backup..."
				if [ "$(app.backupType)" = "ARCHIVE" ]; then
					cp -a "$sourcePath" "$backupDir/$source"
					echo "app: Archived $sourcePath"
				elif [ "$(app.backupType)" = "HARDLINK" ]; then
					cp -al "$sourcePath" "$backupDir/$source"
					echo "app: Hard-linked $sourcePath"
				else
					echo "app: Error: Backup type $(app.backupType) not recognized."
				fi
			else
				echo "app: Error: Could not find $sourcePath"
				continue
			fi
		done
		echo "app: Backup completed."
	fi
}

