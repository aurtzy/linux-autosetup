# Credit to Maxim Norin https://github.com/mnorin
# for OOP-based code from https://stackoverflow.com/questions/36771080/creating-classes-and-objects-using-bash-scripting#comment115718570_40981277
# Modified by Aurtzy

# Class named "app" for bash object

# fields
declare -Ag app_fields

# Handles getting/setting fields.
app.field() {
	if [ "$2" == "=" ]
	then
		app_fields[$1]=$3
	else
		echo ${app_fields[$1]}
	fi
}

# app class constructor
# Params: $1 = installCommand $2 = backupSources
app.constructor() {
	app.name = "$(convertToHyphens "app")"
	
	# Command that is used to install app
	if [ ! "$1" ]; then
		app.installCommand = "${defaultInstallCommand//'"name"'/$(app.name)}"
	else
		app.installCommand = "$1"
	fi

	# Directories to files that user wants to back up.
	# Structured as the following:
	# 'dir/to/file/sourcefile|-|...|-|dir/to/other/file/sourcefile'
	app.backupSources = $2
	echo "$(app.name): Built successfully."
}

# Getter/setter methods
app.name() {
	app.field name "$1" "$2"
}
app.installCommand() {
	app.field installCommand "$1" "$2"
}
app.backupSources() {
	app.field backupSources "$1" "$2"
}

# Echo extracted string from backup source string.
# Takes $1 = string, $2 = index
extractBackupSource() {
	declare substring=$1
	declare -i int=$2
	for (( i=1; i<$int; i++ ))
	do
		oldString=$substring
		substring=${substring##*"$stringSeparator"}
		if [[ $oldString = $substring ]]; then
			substring=''
			return
		fi
	done
	
	substring=${substring%"$stringSeparator"*}
	echo $substring
}

# Install app on call
# Also reset to original dir in case command used cd
app.install() {
	echo "$(app.name): Installing..."
	$(app.installCommand)
	cd $SCRIPT_WORKING_DIR
}

# Back up sources
app.backup() {
	if [ "$backupSources" = '' ]; then
		return
	else
		echo "$(app.name): Checking if backups exist..."
		while
		declare -i i+=1
		do
			backupSource=$(extractBackupSource "$2" $i)
			if [[ -d $backupSource || -f $backupSource ]]; then 
				echo "$(app.name): $backupSource found! Backing up..."
				# Implement back-up code here
			else
				echo "$(app.name): $backupSource does not exist. Continuing..."
			fi
		done
	fi
}

