# Credit to Maxim Norin https://github.com/mnorin
# for OOP-based code from https://stackoverflow.com/questions/36771080/creating-classes-and-objects-using-bash-scripting#comment115718570_40981277
# Modified by Aurtzy

# Class named "app" for bash object

# fields
fields="app_fields"
declare -Ag fields

# Handles getting/setting fields.
app.field() {
	if [ "$2" == "=" ]; then
		fields[$1]=$3
	else
		echo ${fields[$1]}
	fi
}

# app class constructor
# Params: $1 = installCommand $2 = sources
app.constructor() {
	app.name = "app"
	
	# Command that is used to install app
	if [ ! "$1" ]; then
		app.installCommand = "${defaultInstallCommand//"$name"/$(app.name)}"
	else
		app.installCommand = "$1"
	fi

	# Directories to files that user wants to back up.
	# Structured as the following:
	# 'dir/to/file/sourcefile|-|...|-|dir/to/other/file/sourcefile'
	app.sources = $2
	echo "$(app.name): Built."
}

# Getter/setter methods
app.name() {
	app.field name "$1" "$2"
}
app.installCommand() {
	app.field installCommand "$1" "$2"
}
app.sources() {
	app.field sources "$1" "$2"
}

# Install app on call
# Also reset to original dir in case command used cd
app.install() {
	echo "$(app.name): Installing..."
	eval $(app.installCommand)
	cd "$SCRIPT_WORKING_DIR"
}

# Back up sources
app.backup() {
	requireExistingDir "$APP_BACKUP_DIR"
	if [ "$(app.sources)" = '' ]; then
		return
	else
		backupDir="$APP_BACKUP_DIR/app"
		#mkdir "$backupDir"
		while
		declare -i i+=1
		do
			source="$(extractSource "$(app.sources)" $i)"
			if [ "$source" = '' ]; then
				break
			else
				if [ ${source: -1} = '/' ]; then
					source=${source::-1}
				fi
				sourceName="${source##*"/"}"
				sourceDir="${source%"/"*}"
				
				# Check if source exists
				if [[ -f "$source" || -d "$source" ]]; then
					echo "$(app.name): Found: $source"
					
				else
					echo "$(app.name): Error: Could not find $source"
					continue
				fi
				
				# Dump any old backup
				if [[ -f "$backupDir/$source" || -d "$backupDir/$source" ]]; then
					echo "$(app.name): Old backup found. Dumping..."
					dump "$backupDir/$source"
					echo "$(app.name): Dumped old $backupSource"
				fi
				
				# IMPLEMENT HARD LINK HERE
				echo "$(app.name): # implement: hard link or archive source"
				
				echo "$(app.name): Backed up $backupSource"
			fi
		done
		echo "$(app.name): Backup completed!"
	fi
}

