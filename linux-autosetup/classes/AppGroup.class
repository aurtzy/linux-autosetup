# Credit to Maxim Norin https://github.com/mnorin
# for OOP emulation base from https://stackoverflow.com/questions/36771080/creating-classes-and-objects-using-bash-scripting#comment115718570_40981277
# Modified by Aurtzy

# Class named "AppGroup" for bash object

# fields
declare -Ag fields

# Handles getting/setting fields.
AppGroup.field() {
	if [ "$2" == "=" ]; then
		fields[$1]=$3
	else
		echo ${fields[$1]}
	fi
}

# AppGroup class constructor
# Params: apps to add
AppGroup.constructor() {
	AppGroup.add "${@}"
}

# Getter/setter methods
AppGroup.apps() {
	AppGroup.field apps "$1" "$2"
}
AppGroup.sourcePaths() {
	for object in $(AppGroup.apps); do
		$object.sourcePaths
	done
}

# Display apps; allows for recursive displaying of apps in app groups
AppGroup.display() {
	echo -n "AppGroup:"
	for app in $(AppGroup.apps); do
		echo -n " $($app.display)"
	done
	echo ";"
}
# Display app backups 
AppGroup.displayBackups() {
	echo "AppGroup:"
	for app in $(AppGroup.apps); do
		$app.displayBackups
	done
}

# Add app to apps field
AppGroup.add() {
	for object in "${@}"; do
		if [[ ! " ${apps[*]} " =~ " ${object} " && ! " ${!appGroups[*]} " =~ " ${object} " ]]; then
			echo
			echo "AppGroup: Error: Object '$object' was not found"
			echo "An object must exist before it can be added to an app group."
			echo "Please check your config and resolve."
			echo "Exiting..."
			exit 1
		fi
		if [ "$AppGroup.apps" != '' ]; then
			AppGroup.apps = "$(AppGroup.apps) $object"
		else
			AppGroup.apps = "$object"
		fi
	done
}

# Install AppGroup on call
# Also reset to original dir in case command used cd
AppGroup.install() {
	echo
	echo
	echo "AppGroup: Installing from app group..."
	echo "Use -y/-n if you want to autofill prompts for backup installs."
	for app in $(AppGroup.apps); do
		$app.install
	done
	echo
	echo "If any apps failed to install from this app group, they will be listed below:"
	for app in $(AppGroup.apps); do
		if [ $($app.failedInstall) -eq 1 ]; then
			echo $app
		fi
	done
	echo
	echo "AppGroup: Installation completed!"
}

# Back up sources
AppGroup.backup() {
	echo
	echo
	echo "AppGroup: Backing up from app group..."
	for app in $(AppGroup.apps)
	do
		$app.backup
	done
	echo
	echo "If any apps failed to be backed up from this app group, they will be listed below:"
	for app in $(AppGroup.apps); do
		if [ "$($app.failedBackup)" -eq 1 ]; then
			echo "$app:"
			echo "$($app.failedBackupSources)"
		fi
	done
	echo
	echo "AppGroup: Backup completed!"
}

