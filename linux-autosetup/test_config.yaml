
# allow for different cases of types which i can put some effort in making conversions
# e.g. if apps is str, convert to list[str], but accept list[str] too here.
pack1:
    ubuntu:
        # accept only str - if only one line, then use split(); if more than one, then split by '\n'
        extend: debian popos
        apps: app1 app2 app3
        backup_sources: dez/nutz
        # settings and commands could be instances of separate classes??
        settings:
            app_install_type: FLATPAK
            backup_type: COPY
            backup_paths: source/path
            backup_keep: 1
            dump_dir: /tmp/linux-autosetup-dump
            tmp_dir: /tmp
            var_str: '$%s$'
            error_handling: something # can just be a string... or enum? figure out whether importing is big deal
        commands:

            # would be equivalent to just having
            # echo someothercommand
            # the two commands can by default be attached at the bottom like this
            # if not found in custom cmd and they exist
            custom_install_cmd: |
                echo someothercommand
                $app_install_cmd$
                $backup_install_cmd$
            custom_backup_cmd: |
                ...
        vars:
            # BY DEFAULT, ALL SETTINGS ARE ASSIGNED TO VARS BY SAME NAME

_______________

# NOTES:
# CONVERTING STR, LIST[STR] for values that should be list[str], allowing both str or list[str]
#     1. single-line delims by space; 2. multi-line delims by \n; 3. list is list
#     mention somewhere limits of 1. and 3. with quotes and special characters
# SETTINGS ALL HAVE GLOBAL VALUES now, including the now-defined app list and file list, being empty lists by default
# "VALIDATE" OPTION (and maybe options for this option, e.g. "validate packs"?)?
#     would parse config and print any possibly useful information
# FALL BACK TO DEFAULTS when using any false-type values (e.g. '', [], null, False); makes it logical and easy to parse
#     all settings should now be easily overridable like this
# SCRIPT SHOULD FIND DISTROS BY looking through what is currently called DEFAULTS, regardless of if
#     one exists obscurely in a pack - however, give user an option to enter a custom one by -> #custom_default
# PIPES SHOULD BE DETECTED WHEN running commands to give Popen correct arguments. this should remedy
#     having to hard-code the backup types and alows for different names if users want

predefined:
    app_install_types:
        APT: sudo apt --assume-yes install $@
        FLATPAK: flatpak install -y --noninteractive $@
        PACMAN: sudo pacman -S --noconfirm --needed $@
        PARU: paru -S --noconfirm --needed $@

    file_backup_types:
        COPY:
            INSTALL: tar -xPf "$1.tar"
            BACKUP: tar -cPf "$1.tar" "${@:2}"
        COMPRESS:
            INSTALL: tar -xPf "$1.tar.xz"
            BACKUP: tar -cJPf "$1.tar.xz" "${@:2}"
        ENCRYPT:
            INSTALL: openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -salt -in "$1.tar.xz.enc" | tar -xPf -
            BACKUP: tar -cJPf - "${@:2}" | openssl enc -e -aes-256-cbc -md sha512 -pbkdf2 -salt -out "$1.tar.xz.enc"

packs:
    DEFAULTS: # better names than DEFAULTS and FALLBACK?
        FALLBACK:
            extends: null
            apps:
                list: []
                install_type: null
            files:
                list: []
                backup_type: COPY
                backup_paths: ./backups
                backup_keep: 1
                dump_dir: /tmp/linux-autosetup-dump
                tmp_dir: /tmp
            custom:
                install_cmd: null
                backup_cmd: null
            error_handling: PROMPT
        ubuntu:
            . . .
        popos:
            . . .
    custom_extra_special_pack_that_shows_off_some_special_stuff:
        popos:
            extends: ubuntu
            files:
                list: |
                    //HOME/Documents/backups/etc        # "//HOME" can be used as a substitution for the "target" user from the prompt at start of script
                    path/with spaces/and-quotes/at end" # each line will be run through shlex.quote(), so there is no need to make these shell-compliant (sort of; think it is still possible to error)
            custom:
                install_cmd: |
                    //app_install_cmd
                    //file_install_cmd
                backup_cmd: |
                    //file_backup_cmd


pack_groups: # ? not given much thought about yet
